workflows:
  ios-workflow:
    name: iOS Test Build
    max_build_duration: 60
    environment:
      node: 22.14.0
      xcode: 15.0
      cocoapods: default
    scripts:
      - name: Install dependencies with legacy peer deps
        script: |
          npm install --legacy-peer-deps
          
      - name: Fix ajv dependency issue
        script: |
          npm install ajv@^8.0.0 --legacy-peer-deps
          npm install ajv-keywords@^5.0.0 --legacy-peer-deps
          
      - name: Install Capacitor iOS
        script: |
          npm install @capacitor/ios --legacy-peer-deps
          
      - name: Build web assets (ignore warnings)
        script: |
          CI=false npm run build
          
      - name: Remove and recreate iOS platform
        script: |
          rm -rf ios
          npx cap add ios
          
      - name: Configure iOS project
        script: |
          cd ios/App
          
          # Set deployment target
          sed -i '' 's/IPHONEOS_DEPLOYMENT_TARGET = [0-9.]*/IPHONEOS_DEPLOYMENT_TARGET = 13.0/g' App.xcodeproj/project.pbxproj
          
          # Fix Podfile
          echo "platform :ios, '13.0'" > Podfile.tmp
          cat Podfile >> Podfile.tmp
          mv Podfile.tmp Podfile
          
          # Install pods
          pod install
          
          cd ../..
          
      - name: Sync Capacitor
        script: |
          npx cap sync ios
          
      - name: Install ldid for fakesigning
        script: |
          brew install ldid
          
      - name: Build and fakesign IPA
        script: |
          cd ios/App
          
          # Build the app
          xcodebuild clean build \
            -workspace App.xcworkspace \
            -scheme App \
            -configuration Release \
            -sdk iphoneos \
            -derivedDataPath build \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGNING_ALLOWED=NO
          
          # Find the built app
          APP_PATH=$(find build -name "*.app" -type d | head -n 1)
          
          # Create Payload directory
          mkdir -p Payload
          cp -r "$APP_PATH" Payload/App.app
          
          # Remove any existing signatures
          rm -rf Payload/App.app/_CodeSignature
          rm -f Payload/App.app/embedded.mobileprovision
          
          # Create a minimal entitlements file
          cat > entitlements.plist << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>application-identifier</key>
              <string>FAKETEAMID.com.medicureon.app</string>
              <key>get-task-allow</key>
              <true/>
          </dict>
          </plist>
          EOF
          
          # Fakesign the app binary
          ldid -Sentitlements.plist Payload/App.app/App
          
          # Fakesign all frameworks
          find Payload/App.app/Frameworks -name "*.framework" -type d | while read framework; do
            framework_name=$(basename "$framework" .framework)
            if [ -f "$framework/$framework_name" ]; then
              ldid -S "$framework/$framework_name"
            fi
          done
          
          # Fakesign all dylibs
          find Payload/App.app -name "*.dylib" -type f | while read dylib; do
            ldid -S "$dylib"
          done
          
          # Create the IPA
          zip -r $CM_BUILD_DIR/MediCureOn-fakesigned.ipa Payload
          
    artifacts:
      - $CM_BUILD_DIR/MediCureOn-fakesigned.ipa